#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file is in PLT Scheme editor format.
   Open this file in DrScheme version 370 or later to read it.

   Most likely, it was created by saving a program in DrScheme,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://www.plt-scheme.org
|#
 35 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wxmedia\0"
4 1 8 #"wximage\0"
2 0 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 56
(
 #"(lib \"hrule-snip.ss\" \"macro-debugger\" \"syntax-browse"
 #"r\")\0"
) 1 0 60
(
 #"(lib \"implementation.ss\" \"macro-debugger\" \"syntax-br"
 #"owser\")\0"
) 2 0 18 #"java-comment-box%\0"
1 0 23 #"java-interactions-box%\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55
(
 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private"
 #"\")\0"
) 1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 15 #"make-line-snip\0"
1 0 15 #"make-line-snip\0"
1 0 15 #"make-line-snip\0"
1 0 15 #"make-line-snip\0"
1 0 15 #"test-case-box%\0"
2 0 48 #"(lib \"test-case-box-snipclass.ss\" \"test-suite\")\0"
2 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
00000000000 1 103 0 1 #"\0"
0 75 1 #"\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 11 #" Monospace\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 15
#"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 27
#"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 14
#"Html Standard\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drscheme:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drscheme:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 2 37
#"profj:syntax-colors:scheme:prim-type\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 2 38
#"profj:syntax-colors:scheme:identifier\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 34
#"profj:syntax-colors:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:literal\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
33 #"profj:syntax-colors:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:default\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 37
#"profj:syntax-colors:scheme:uncovered\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:covered\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 4 4
#"XML\0"
0 70 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 8 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 8 24
#"drscheme:text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 100 0 0 0 0 -1 -1 2 1
#"\0"
0 71 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 71 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 100 0 0 0 0 -1 -1 0 1
#"\0"
0 75 11 #" Monospace\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 27
1 #"\0"
0 70 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 27 1
#"\0"
0 70 1 #"\0"
2 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 27 1
#"\0"
0 70 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 27 1
#"\0"
0 70 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 27 1
#"\0"
0 70 1 #"\0"
1 -2 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 27 1
#"\0"
0 70 1 #"\0"
1 -2 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 27 1
#"\0"
0 70 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 27 1
#"\0"
0 70 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 27 1
#"\0"
0 70 1 #"\0"
1.2 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 27 1
#"\0"
0 70 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 27 1
#"\0"
0 75 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 27 1
#"\0"
0 75 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 153 0 0 0 0 0 -1 -1 27 1
#"\0"
0 75 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 27 1
#"\0"
0 75 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 27 1
#"\0"
0 75 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 22 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 15 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 14 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 19 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 22 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 15 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 14 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 19 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 22 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 15
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 14
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 19
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 17
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 24
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 19
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 178 34 34 255 255 255 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 178 34 34 255 255 255 -1
-1 20 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 24
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 178 34 34 255 255 255 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 24 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 20 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 20 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 17
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 178 34 34 255 255 255 -1
-1 27 1 #"\0"
0 75 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 27 1
#"\0"
0 75 1 #"\0"
0.8 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 -1 27 1
#"\0"
0 75 1 #"\0"
0.8 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 -1 27 1
#"\0"
0 70 1 #"\0"
0.8 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 -1 27 1
#"\0"
0 70 1 #"\0"
0.8 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 -1
00000000002 0 00000000000 31 00000000000 904 0 4 3 94
(
 #";; Die ersten drei Zeilen dieser Datei wurden von DrScheme eingef"
 #"\303\274gt. Sie enthalten Metadaten"
) 0 0 4 29 1 #"\n"
0 0 4 3 83
(
 #";; \303\274ber die Sprachebene dieser Datei in einer Form, die DrSc"
 #"heme verarbeiten kann."
) 0 0 4 29 1 #"\n"
0 0 4 11 113
(
 #"#reader(lib \"DMdA-vanilla-reader.ss\" \"deinprogramm\")((m"
 #"odname 12-terms) (read-case-sensitive #f) (teachpacks ()) "
) 0 0 4 3 81
(
 #"(deinprogramm-settings #9(#f write repeating-decimal #t #t none exp"
 #"licit #f ())))"
) 0 0 4 29 1 #"\n"
0 0 17 3 42 #"; Ein Operator mit Argumenten ist ein Wert"
0 0 4 29 1 #"\n"
0 0 17 3 23 #";   (make-op name args)"
0 0 4 29 1 #"\n"
0 0 17 3 32 #"; wobei name ein string ist und "
0 0 4 29 1 #"\n"
0 0 17 3 6 #"; args"
0 0 17 3 1 #" "
0 0 17 3 26 #"eine Liste von Termen ist."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 24 #"define-record-procedures"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 14 3 7 #"make-op"
0 0 4 3 1 #" "
0 0 14 3 3 #"op?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 7 #"op-name"
0 0 4 3 1 #" "
0 0 14 3 7 #"op-args"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 28 #"; Eine Variable ist ein Wert"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";   (make-var name)"
0 0 4 29 1 #"\n"
0 0 17 3 28 #"; wobie name ein string ist."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 24 #"define-record-procedures"
0 0 4 3 1 #" "
0 0 14 3 3 #"var"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 14 3 8 #"make-var"
0 0 4 3 1 #" "
0 0 14 3 4 #"var?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 8 #"var-name"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 34 #"; Ein Term ist eins der folgenden:"
0 0 4 29 1 #"\n"
0 0 17 3 38 #";   - ein Operator mit Argumenten oder"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";   - eine Variable"
0 0 4 29 1 #"\n"
0 0 17 3 12 #"; Name: term"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 22 #"; Einige Beispielterme"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 3 #"AlT"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"make-op"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 3 #"AlF"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"make-op"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"F\""
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 5 #"AlNot"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"make-op"
0 0 4 3 1 #" "
0 0 19 3 5 #"\"Not\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 5 #"AlAnd"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"make-op"
0 0 4 3 1 #" "
0 0 19 3 5 #"\"And\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 4 #"AlOr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"make-op"
0 0 4 3 1 #" "
0 0 19 3 4 #"\"Or\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-var"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-var"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"y\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"AlNot"
0 0 4 3 1 #" "
0 0 14 3 3 #"AlT"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"t2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"AlAnd"
0 0 4 3 1 #" "
0 0 14 3 3 #"AlT"
0 0 4 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"t3"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"AlOr"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 14 3 3 #"AlT"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 61
#"; Prozedur zum Aneinanderh\303\244ngen von strings mit Trennzeichen"
0 0 4 29 1 #"\n"
0 0 17 3 47 #"; concat-strings: string list(string) -> string"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 14 #"concat-strings"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"delim"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 5 #"pair?"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 14 3 5 #"delim"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 14 #"concat-strings"
0 0 4 3 1 #" "
0 0 14 3 5 #"delim"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 8 #"))))))))"
0 0 4 29 1 #"\n"
0 31 00000000078 4 00000000000 1 00000000000 7 0 22 3 1 #"("
0 0 14 3 14 #"concat-strings"
0 0 2 3 1 #" "
0 0 19 3 4 #"\", \""
0 0 2 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 00000000000 00000000000 1 00000000000 1 0 19 3 2 #"\"\""
0 00000000000 00000000000 1 00000000000 0 00000000000 00000000000 1
00000000000 0 00000000000 00000000000 1 00000000000 0 00000000000 1 0 0
0 0 4 29 1 #"\n"
0 31 00000000096 4 00000000000 1 00000000000 10 0 22 3 1 #"("
0 0 14 3 14 #"concat-strings"
0 0 2 3 1 #" "
0 0 19 3 4 #"\", \""
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 22 3 2 #"))"
0 00000000000 00000000000 1 00000000000 1 0 19 3 3 #"\"A\""
0 00000000000 00000000000 1 00000000000 0 00000000000 00000000000 1
00000000000 0 00000000000 00000000000 1 00000000000 0 00000000000 1 0 0
0 0 4 29 1 #"\n"
0 31 00000000120 4 00000000000 1 00000000000 14 0 22 3 1 #"("
0 0 14 3 14 #"concat-strings"
0 0 2 3 1 #" "
0 0 19 3 4 #"\", \""
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 19 3 3 #"\"A\""
0 0 2 3 1 #" "
0 0 19 3 3 #"\"B\""
0 0 2 3 1 #" "
0 0 19 3 3 #"\"C\""
0 0 22 3 2 #"))"
0 00000000000 00000000000 1 00000000000 1 0 19 3 9 #"\"A, B, C\""
0 00000000000 00000000000 1 00000000000 0 00000000000 00000000000 1
00000000000 0 00000000000 00000000000 1 00000000000 0 00000000000 1 0 0
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 48 #"; Darstellung eines Terms in polnischer Notation"
0 0 4 29 1 #"\n"
0 0 17 3 37 #"; term->string/polish: term -> string"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 19 #"term->string/polish"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 4 #"var?"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"var-name"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 3 #"op?"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"op-args"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 7 #"op-name"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 7 #"op-name"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 14 #"concat-strings"
0 0 4 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 19 #"term->string/polish"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"op-args"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 9 #")))))))))"
0 0 4 3 5 #"     "
0 0 4 29 1 #"\n"
0 31 00000000066 4 00000000000 1 00000000000 5 0 22 3 1 #"("
0 0 14 3 19 #"term->string/polish"
0 0 2 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 1 #")"
0 00000000000 00000000000 1 00000000000 1 0 19 3 7 #"\"Not T\""
0 00000000000 00000000000 1 00000000000 0 00000000000 00000000000 1
00000000000 0 00000000000 00000000000 1 00000000000 0 00000000000 1 0 0
0 0 4 29 1 #"\n"
0 31 00000000066 4 00000000000 1 00000000000 5 0 22 3 1 #"("
0 0 14 3 19 #"term->string/polish"
0 0 2 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 1 #")"
0 00000000000 00000000000 1 00000000000 1 0 19 3 13 #"\"And T Not T\""
0 00000000000 00000000000 1 00000000000 0 00000000000 00000000000 1
00000000000 0 00000000000 00000000000 1 00000000000 0 00000000000 1 0 0
0 0 4 29 1 #"\n"
0 31 00000000066 4 00000000000 1 00000000000 5 0 22 3 1 #"("
0 0 14 3 19 #"term->string/polish"
0 0 2 3 1 #" "
0 0 14 3 2 #"t3"
0 0 22 3 1 #")"
0 00000000000 00000000000 1 00000000000 1 0 19 3 8 #"\"Or y T\""
0 00000000000 00000000000 1 00000000000 0 00000000000 00000000000 1
00000000000 0 00000000000 00000000000 1 00000000000 0 00000000000 1 0 0
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 44 #"; Darstellung eines Terms in Scheme Notation"
0 0 4 29 1 #"\n"
0 0 17 3 46 #"; term->string/scheme-notation: term -> string"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 28 #"term->string/scheme-notation"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 4 #"var?"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"var-name"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 3 #"op?"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"op-args"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 7 #"op-name"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 13 #"string-append"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 19 3 3 #"\"(\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"op-name"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 14 #"concat-strings"
0 0 4 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 28 #"term->string/scheme-notation"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"op-args"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 19 3 3 #"\")\""
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 31 00000000066 4 00000000000 1 00000000000 5 0 22 3 1 #"("
0 0 14 3 28 #"term->string/scheme-notation"
0 0 2 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 1 #")"
0 00000000000 00000000000 1 00000000000 1 0 19 3 9 #"\"(Not T)\""
0 00000000000 00000000000 1 00000000000 0 00000000000 00000000000 1
00000000000 0 00000000000 00000000000 1 00000000000 0 00000000000 1 0 0
0 0 4 29 1 #"\n"
0 31 00000000066 4 00000000000 1 00000000000 5 0 22 3 1 #"("
0 0 14 3 28 #"term->string/scheme-notation"
0 0 2 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 1 #")"
0 00000000000 00000000000 1 00000000000 1 0 19 3 17
#"\"(And T (Not T))\""
0 00000000000 00000000000 1 00000000000 0 00000000000 00000000000 1
00000000000 0 00000000000 00000000000 1 00000000000 0 00000000000 1 0 0
0 0 4 29 1 #"\n"
0 31 00000000066 4 00000000000 1 00000000000 5 0 22 3 1 #"("
0 0 14 3 28 #"term->string/scheme-notation"
0 0 2 3 1 #" "
0 0 14 3 2 #"t3"
0 0 22 3 1 #")"
0 00000000000 00000000000 1 00000000000 1 0 19 3 10 #"\"(Or y T)\""
0 00000000000 00000000000 1 00000000000 0 00000000000 00000000000 1
00000000000 0 00000000000 00000000000 1 00000000000 0 00000000000 1 0 0
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 65
#"; Anwenden einer Funktion auf eine variable Anzahl von Argumenten"
0 0 4 29 1 #"\n"
0 0 17 3 57 #"; apply-proc: (A -> (A -> ... (A -> A) ...)) list(A) -> B"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 10 #"apply-proc"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"proc"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"proc"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 5 #"pair?"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 10 #"apply-proc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"proc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"first"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"rest"
0 0 4 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 31 00000000078 4 00000000000 1 00000000000 7 0 22 3 1 #"("
0 0 14 3 10 #"apply-proc"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #")"
0 00000000000 00000000000 1 00000000000 1 0 20 3 1 #"1"
0 00000000000 00000000000 1 00000000000 0 00000000000 00000000000 1
00000000000 0 00000000000 00000000000 1 00000000000 0 00000000000 1 0 0
0 0 4 29 1 #"\n"
0 31 00000000228 4 00000000000 1 00000000000 32 0 22 3 1 #"("
0 0 14 3 10 #"apply-proc"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 2 3 1 #" "
0 0 14 3 1 #"x"
0 0 2 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 3 #")))"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 20 3 2 #"39"
0 0 22 3 2 #"))"
0 00000000000 00000000000 1 00000000000 1 0 20 3 2 #"42"
0 00000000000 00000000000 1 00000000000 0 00000000000 00000000000 1
00000000000 0 00000000000 00000000000 1 00000000000 0 00000000000 1 0 0
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 24 #"; Auswertung eines Terms"
0 0 4 29 1 #"\n"
0 0 17 3 74
(
 #"; eval: term (string -> (A -> (A -> ... (A -> A) ...))) (string -> "
 #"A) -> A"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 4 #"eval"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 14 3 9 #"op-interp"
0 0 4 3 1 #" "
0 0 14 3 10 #"var-interp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 4 #"var?"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"var-interp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"var-name"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 3 #"op?"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 10 #"apply-proc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"op-interp"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"op-name"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"eval"
0 0 4 3 1 #" "
0 0 14 3 1 #"s"
0 0 4 3 1 #" "
0 0 14 3 9 #"op-interp"
0 0 4 3 1 #" "
0 0 14 3 10 #"var-interp"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"op-args"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 49 #"; Interpretation der Operatoren der Aussagenlogik"
0 0 4 29 1 #"\n"
0 0 17 3 77
(
 #"; Al-ops-interp: string -> (number -> (number -> ... (number -> num"
 #"ber) ...))"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 13 #"Al-ops-interp"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"name"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 8 #"string=?"
0 0 4 3 1 #" "
0 0 14 3 4 #"name"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"T\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 8 #"string=?"
0 0 4 3 1 #" "
0 0 14 3 4 #"name"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"F\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 8 #"string=?"
0 0 4 3 1 #" "
0 0 14 3 4 #"name"
0 0 4 3 1 #" "
0 0 19 3 5 #"\"Not\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 8 #"string=?"
0 0 4 3 1 #" "
0 0 14 3 4 #"name"
0 0 4 3 1 #" "
0 0 19 3 5 #"\"And\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"min"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 8 #"string=?"
0 0 4 3 1 #" "
0 0 14 3 4 #"name"
0 0 4 3 1 #" "
0 0 19 3 4 #"\"Or\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"max"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 19 #"; Variablenbelegung"
0 0 4 29 1 #"\n"
0 0 17 3 31 #"; Al-var-interp: name -> number"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 13 #"Al-var-interp"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"name"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 8 #"string=?"
0 0 4 3 1 #" "
0 0 14 3 4 #"name"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"x\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 8 #"string=?"
0 0 4 3 1 #" "
0 0 14 3 4 #"name"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"y\""
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 52
#"; Spezialisierte Version von eval f\303\274r Aussagenlogik"
0 0 4 29 1 #"\n"
0 0 17 3 25 #"; Al-eval: term -> number"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 7 #"Al-eval"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"eval"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 14 3 13 #"Al-ops-interp"
0 0 4 3 1 #" "
0 0 14 3 13 #"Al-var-interp"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 22 #"; Testf\303\244lle f\303\274r eval"
0 0 4 29 1 #"\n"
0 31 00000000066 4 00000000000 1 00000000000 5 0 22 3 1 #"("
0 0 14 3 7 #"Al-eval"
0 0 2 3 1 #" "
0 0 14 3 3 #"AlT"
0 0 22 3 1 #")"
0 00000000000 00000000000 1 00000000000 1 0 20 3 1 #"1"
0 00000000000 00000000000 1 00000000000 0 00000000000 00000000000 1
00000000000 0 00000000000 00000000000 1 00000000000 0 00000000000 1 0 0
0 0 4 29 1 #"\n"
0 31 00000000066 4 00000000000 1 00000000000 5 0 22 3 1 #"("
0 0 14 3 7 #"Al-eval"
0 0 2 3 1 #" "
0 0 14 3 3 #"AlF"
0 0 22 3 1 #")"
0 00000000000 00000000000 1 00000000000 1 0 20 3 1 #"0"
0 00000000000 00000000000 1 00000000000 0 00000000000 00000000000 1
00000000000 0 00000000000 00000000000 1 00000000000 0 00000000000 1 0 0
0 0 4 29 1 #"\n"
0 31 00000000066 4 00000000000 1 00000000000 5 0 22 3 1 #"("
0 0 14 3 7 #"Al-eval"
0 0 2 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 1 #")"
0 00000000000 00000000000 1 00000000000 1 0 20 3 1 #"0"
0 00000000000 00000000000 1 00000000000 0 00000000000 00000000000 1
00000000000 0 00000000000 00000000000 1 00000000000 0 00000000000 1 0 0
0 0 4 29 1 #"\n"
0 31 00000000066 4 00000000000 1 00000000000 5 0 22 3 1 #"("
0 0 14 3 7 #"Al-eval"
0 0 2 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 1 #")"
0 00000000000 00000000000 1 00000000000 1 0 20 3 1 #"0"
0 00000000000 00000000000 1 00000000000 0 00000000000 00000000000 1
00000000000 0 00000000000 00000000000 1 00000000000 0 00000000000 1 0 0
0 0 4 29 1 #"\n"
0 31 00000000066 4 00000000000 1 00000000000 5 0 22 3 1 #"("
0 0 14 3 7 #"Al-eval"
0 0 2 3 1 #" "
0 0 14 3 2 #"t3"
0 0 22 3 1 #")"
0 00000000000 00000000000 1 00000000000 1 0 20 3 1 #"1"
0 00000000000 00000000000 1 00000000000 0 00000000000 00000000000 1
00000000000 0 00000000000 00000000000 1 00000000000 0 00000000000 1 0 0
0 00000000000
